---

INFO: |
    - datacard inputs per category (final state) and then split to subrprocesses
    - this is a test configuration

COMMON_SETUP: &COMMON_SETUP
    words_to_be_replaced: [SQRTS, PROCESS, CATEGORY]
    reserved_sections:
        - observation
        - functions_and_definitions
        - setup
        - category
        - systematics

    #interpreter_keywords:
        #- INSERT

    process_names: [ggH, ggZZ, qqZZ, zjets]


#########################################################################################################################################

2e2mu:
    setup:
        <<: *COMMON_SETUP

    category: 2e2mu  #if not specified, use the key from the top of this dictionary, i.e. '2e2mu'
    observation:
        rate: 8  #TODO: get it from elswhere
        tree_name: a/b/c.root/mytree
        selection: "passedFullSelection"

    functions_and_definitions:
        - mass4l[105,140]
        - mH[125,105,140]
        - expr::mean_3_8('INSERT(DCB_parametrization.yaml:2e2mu:mean)',mass4l)
        - expr::sigma_3_8('INSERT(DCB_parametrization.yaml:2e2mu:sigma)',mass4l)
        - expr::alpha_3_8('0.956',mass4l)
        - expr::n_3_8('4.713',mass4l)
        - expr::alpha2_3_8('1.377',mass4l)
        - expr::n2_3_8('6.2383+(0.318)*(@0-125)',mass4l)


    systematics: INSERT(systematics.yaml:2e2mu)

    ggH:
        is_signal : 1
        #rate : 4.0230674  #TODO: get it from a dictionary
        rate : INSERT(yields.yaml:2e2mu:ggH)
        shape : "RooDoubleCB::ggH(mass4l, mean_3_8, sigma_3_8, alpha_3_8, n_3_8, alpha_3_8, n2_3_8)"

    qqZZ:
        is_signal : 0
        rate : 7.11430
        shape : RooUniform:qqZZ(mass4l)





###################################################################################################################
#RooWorkspace_model_instructions: |
    #Process high-level object creation syntax
    #Accepted forms of syntax are


    #Creating variables

    #x[-10,10]             -  Create variable x with given range and put it in workspace
    #x[3,-10,10]           -  Create variable x with given range and initial value and put it in workspace
    #x[3]                  -  Create variable x with given constant value

    #<numeric literal>     - Numeric literal expressions (0.5, -3 etc..) are converted to a RooConst(<numeric literal>)
                            #where ever a RooAbsReal or RooAbsArg argument is expected

    #Creating categories

    #c[lep,kao,nt1,nt2]    -  Create category c with given state names
    #tag[B0=1,B0bar=-1]    -  Create category tag with given state names and index assignments


    #Creating functions and p.d.f.s

    #MyPdf::g(x,m,s)       - Create p.d.f or function of type MyPdf with name g with argument x,m,s
                            #Interpretation and number of arguments are mapped to the constructor arguments of the class
                            #(after the name and title).

    #MyPdf(x,m,s)          - As above, but with an implicitly defined (unique) object name


    #Creating sets and lists (to be used as inputs above)

    #{a,b,c}               - Create RooArgSet or RooArgList (as determined by context) from given contents



    #Objects that are not created, are assumed to exist in the workspace
    #Object creation expressions as shown above can be nested, e.g. one can do

    #RooGaussian::g(x[-10,10],m[0],3)

    #to create a p.d.f and its variables in one go. This nesting can be applied recursively e.g.

    #SUM::model( f[0.5,0,1] * RooGaussian::g( x[-10,10], m[0], 3] ),
                            #RooChebychev::c( x, {a0[0.1],a1[0.2],a2[-0.3]} ))

    #creates the sum of a Gaussian and a Chebychev and all its variables


    #A seperate series of operator meta-type exists to simplify the construction of composite expressions
    #meta-types in all capitals (SUM) create p.d.f.s, meta types in lower case (sum) create
    #functions.


    #SUM::name(f1*pdf1,f2*pdf2,pdf3]  -- Create sum p.d.f name with value f1*pdf1+f2*pdf2+(1-f1-f2)*pdf3
    #RSUM::name(f1*pdf1,f2*pdf2,pdf3] -- Create recursive sum p.d.f. name with value f1*pdf1 + (1-f1)(f2*pdf2 + (1-f2)pdf3)
    #ASUM::name(f1*amp1,f2*amp2,amp3] -- Create sum p.d.f. name with value f1*amp1+f2*amp2+(1-f1-f2)*amp3 where amplX are amplitudes of type RooAbsReal
    #sum::name(a1,a2,a3]              -- Create sum function with value a1+a2+a3
    #sum::name(a1*b1,a2*b2,a3*b 3]    -- Create sum function with value a1*b1+a2*b2+a3*b3

    #PROD::name(pdf1,pdf2]            -- Create product of p.d.f with 'name' with given input p.d.fs
    #PROD::name(pdf1|x,pdf2]          -- Create product of conditional p.d.f. pdf1 given x and pdf2
    #prod::name(a,b,c]                -- Create production function with value a*b*c

    #SIMUL::name(cat,a=pdf1,b=pdf2]   -- Create simultaneous p.d.f index category cat. Make pdf1 to state a, pdf2 to state b

    #EXPR::name('expr',var,...]       -- Create an generic p.d.f that interprets the given expression
    #expr::name('expr',var,...]       -- Create an generic function that interprets the given expression


    #The functionality of high level object creation tools like RooSimWSTool, RooCustomizer and RooClassFactory
    #is also interfaced through meta-types in the factory


    #Interface to RooSimWSTool

    #SIMCLONE::name( modelPdf, $ParamSplit(...),
                    #$ParamSplitConstrained(...), $Restrict(...) ]            -- Clone-and-customize modelPdf according to ParamSplit and ParamSplitConstrained()
                                                                                #specifications and return a RooSimultaneous p.d.f. of all built clones

    #MSIMCLONE::name( masterIndex,
                    #$AddPdf(mstate1, modelPdf1, $ParamSplit(...)),
                    #$AddPdf(mstate2,modelPdf2),...) ]                       -- Clone-and-customize multiple models (modelPdf1,modelPdf2) according to ParamSplit and
                                                                                #ParamSplitConstrained() specifications and return a RooSimultaneous p.d.f. of all built clones,
                                                                                #using the specified master index to map prototype p.d.f.s to master states
    #Interface to RooCustomizer

    #EDIT::name( orig, substNode=origNode), ... ]                             -- Create a clone of input object orig, with the specified replacements operations executed
    #EDIT::name( orig, origNode=$REMOVE(), ... ]                              -- Create clone of input removing term origNode from all PROD() terms that contained it
    #EDIT::name( orig, origNode=$REMOVE(prodname,...), ... ]                  -- As above, but restrict removal of origNode to PROD term(s) prodname,...


    #Interface to RooClassFactory

    #CEXPR::name('expr',var,...]       -- Create an custom compiled p.d.f that evaluates the given expression
    #cexpr::name('expr',var,...]       -- Create an custom compiled function that evaluates the given expression


    #$MetaType(...)        - Meta argument that does not result in construction of an object but is used logically organize
                            #input arguments in certain operator p.d.f. constructions. The defined meta arguments are context dependent.

                            #The only meta argument that is defined globally is $Alias(typeName,aliasName) to
                            #define aliases for type names. For the definition of meta arguments in operator p.d.f.s
                            #see the definitions below


#...
